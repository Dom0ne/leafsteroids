@page "/"
@using MongoDB.Driver
@using MongoDB.Bson
@using gdc_2023_demo_registration.Data

@inject NavigationManager NavigationManager
@inject IMongoCollection<Player> Players
@inject IMongoCollection<Event> Events

<style>
    body {
        background-color: #023430;
    }
</style>
<img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">
<div class="card bg-white">
    <article class="card-body mx-auto" style="max-width: 400px;">
        <h2 class="text-center">Player Registration & Login</h2>
        <h4 class="card-title mt-3 text-center"><b>@Event.name</b></h4>
        <h4 class="card-title mt-3 text-center"><b class="validation-message">@message</b></h4>

        <form>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fa fa-user"></i> </span>
                </div>
                <input id="nickname" @bind="Player.Nickname" name="" class="form-control" placeholder="Nickname (case sensitive!)" type="text">
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fa fa-users"></i> </span>
                </div>
                <input id="teamname" @bind="Player.TeamName" name="" class="form-control" placeholder="Team Name (optional)" type="text">
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fa fa-comment"></i> </span>
                </div>
                <input id="email" @bind="Player.Email" name="" class="form-control" placeholder="E-Mail for prizes (optional)" type="text">
            </div> <!-- form-group// -->


            <div class="form-group">
                <div class="text-center">
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64" @onclick="CreatePlayer"> Register </button>
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64" @onclick="LoginPlayer"> Login </button>
                </div>
            </div> <!-- form-group// -->

            <p></p>
            <p></p>

            <center>
                <iframe style="background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);" width="350" height="600" src="https://charts.mongodb.com/charts-global_shared-jebkk/embed/charts?id=6453fb66-c2fc-4483-8890-4ab8365f1ac6&maxDataAge=60&theme=light&autoRefresh=true"></iframe>
            </center>

        </form>
    </article>
</div> <!-- card.// -->



@code {

    private string message = "";

        private Player Player { get; set; } = new Player();

        private Event Event { get; set; } = new Event()
        {
            // default. Get from appsettings
            Id = "mdb-2023-local-socal",
            name = "MongoDB .local SoCal 2023",
            location = "US-CA"
        };

        Dictionary<string, string>? queryParameters;

        protected override void OnInitialized()
        {
            try
            {
                var uri = new Uri(NavigationManager.Uri);

                queryParameters = uri.Query.TrimStart('?')
                    .Split('&')
                    .ToDictionary(
                        x => Uri.UnescapeDataString(x.Split('=')[0]),
                        x => Uri.UnescapeDataString(x.Split('=')[1])
                    );

                var filter = new BsonDocument("_id", queryParameters["event"]);

                Event = Events.FindSync(filter).Single<Event>();

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }

        }

        private async Task CreatePlayer()
        {
            message = "";
            var filter = new BsonDocument("Nickname", Player.Nickname);

            if (Players.Find<Player>(filter).Any<Player>())
            {
                message = "[" + Player.Nickname + "] exists! Login instead?";
            }
            else
            {
                Player.location = Event.location; // Inject location of event for new player

                await Players!.InsertOneAsync(Player)!;

                //NavigationManager!.NavigateTo("/done");
                NavigationManager!.NavigateTo("/playerHome?location=" + Player.location + "&Nickname=" + Player.Nickname);
            }
        }

        private async Task LoginPlayer()
        {

            message = "";
            var filter = new BsonDocument("Nickname", Player.Nickname);
            Player existingPlayer = Players.Find<Player>(filter).First<Player>();

            if (existingPlayer != null) {
                NavigationManager!.NavigateTo("/playerHome?location="+ existingPlayer.location+"&Nickname="+existingPlayer.Nickname);
            } else {
                message = "[" + Player.Nickname + "] not found. Register instead?";
            }
        }

    }
