@page "/"
@using MongoDB.Driver
@using MongoDB.Bson
@using System.Web
@using gdc_2023_demo_registration.Data
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager NavigationManager
@inject IMongoCollection<Player> Players
@inject IMongoCollection<PlayerUnique> PlayerUniques
@inject IMongoCollection<Event> Events


<style>
    body {
        background-color: #023430;
    }

    .myiframe {
        background: #F1F5F4;
        border: none;
        border-radius: 2px;
        box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);
        width: 100%;
        height: 90vh;
    }
</style>

<div class="card bg-white">
    <article class="card-body mx-auto" style="max-width: 400px;">
        <h2 class="text-center">Player Registration & Login</h2>
        <h4 class="card-title mt-3 text-center">
            <b>
                @if ( (@Event!=null) ) 
                {
                    if ((@Event.Id != null) && (@Event.location != null) && (@Event.name != null))
                    {
                        <a href="/eventHome/?location=@Event.location&EventId=@Event.Id">@Event.name</a>
                    } else
                    {
                        @Event.name
                    }
                }                 
            </b>
        </h4>
        <h4 class="card-title mt-3 text-center"><b class="validation-message">@message</b></h4>

        <form>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fa fa-user"></i> </span>
                </div>
                <input  id="nickname"
                        type="text"
                        class="form-control" 
                        placeholder="Nickname (case sensitive!)" 
                        @bind="Player.Nickname" name=""  
                        @oninput="AutoCompleteNickname"
                        required>

                @if (suggestedNicknames.Count > 0)
                {
                    <div class="autocomplete" >
                        <ul class="options">
                            @foreach (var nickname in suggestedNicknames)
                            {
                                <li id="option_@nickname" 
                                    class="option"
                                    @onclick=@(_ => SelectNickname(nickname))
                                >
                                    @nickname <!-- visible suggestion -->
                                </li>
                            }
                        </ul>
                    </div>
                }                
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fa fa-users"></i> </span>
                </div>
                <input id="teamname" @bind="Player.TeamName" name="" class="form-control" placeholder="Team Name (optional)" type="text">
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fa fa-comment"></i> </span>
                </div>
                <input id="email" @bind="Player.Email" 
                    name="" 
                    class="form-control" 
                    placeholder="E-Mail for prizes (optional)" 
                    type="email">
            </div> <!-- form-group// -->


            <div class="form-group">
                <div class="text-center">
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64" @onclick="CreatePlayer"> Register </button>
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64" @onclick="LoginPlayer"> Login </button>
                </div>
            </div> <!-- form-group// -->
        </form>
    </article>
</div> <!-- card.// -->

<div class="card bg-white">
    @if (chartUrl.Length == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="iframe-wrapper">
            <iframe class="myiframe" src="@chartUrl"></iframe>
        </div>
    }
</div>


@inject IJSRuntime jsRuntime


@code {
    private string message = "";
    private string chartUrl = "";

    private Player Player { get; set; } = new Player();
    private PlayerUnique PlayerUnique { get; set; } = new PlayerUnique();

    BsonDocument eventFilter = new BsonDocument("_id", "mdb-local-2023-socal"); // TODO: GET FROM A CONFIG FILE
    private Event? Event;

    Dictionary<string, string>? queryParameters;

    private List<string> suggestedNicknames = new List<string>();
    public int FocusedSuggestionIndex { get; set; } = -1;

    protected override void OnInitialized()
    {
        try
        {
            var uri = new Uri(NavigationManager.Uri);

            queryParameters = uri.Query.TrimStart('?')
                .Split('&')
                .ToDictionary(
                    x => Uri.UnescapeDataString(x.Split('=')[0]),
                    x => Uri.UnescapeDataString(x.Split('=')[1])
                );

            eventFilter = new BsonDocument("_id", queryParameters["event"]);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        Event = Events.FindSync(eventFilter).Single<Event>();

        string atlasChartEmbedDashboardURL = "https://charts.mongodb.com/charts-global_shared-jebkk/embed/dashboards";
        string atlasChartID = "645abbc7-2258-4908-8eb4-94bbe0c6d324";

        string tmpchartUrl = atlasChartEmbedDashboardURL;

        tmpchartUrl += "?id=" + atlasChartID; // FIRST parameter. This typically changed for each route of the website
        tmpchartUrl += "&theme=light";
        tmpchartUrl += "&autoRefresh=true";
        tmpchartUrl += "&maxDataAge=60";
        tmpchartUrl += "&showTitleAndDesc=false";
        tmpchartUrl += "&scalingWidth=100%25"; // 100% url-encoded
        tmpchartUrl += "&scalingHeight=fixed";
        tmpchartUrl += "&showAttribution=false";    // removes the logo inside the iframe = tighter fit
        tmpchartUrl += "&filter={%27Event._id%27:%27" + Event.Id + "%27,%27location%27:%27" + Event.location + "%27}"; // json, url-encoded object {'Event._id':'my-event','location':'XX-XX'}

        chartUrl = tmpchartUrl; // in the future, consider assembling the non-encoded URL, then encode it with HttpUtility.UrlEncode(); 
                                // additional iframe options
                                // https://www.mongodb.com/docs/charts/embedded-chart-options/#std-label-embedded-chart-options
    }

    private async Task CreatePlayer()
    {
        // basic checks
        if ((Player == null) || (Player.Nickname == null) || (Event == null) || (Event.location== null) ) {
            message = "[please fill out the form]";
            return;
        }        

        message = "";
        var filter = new BsonDocument("Nickname", Player.Nickname);

        if (PlayerUniques.Find<PlayerUnique>(filter).Any<PlayerUnique>())
        {
            message = "[" + Player.Nickname + "] exists! Login instead?";
        }
        else
        {
            Player.location = Event.location; // Inject location of event for new player

            await Players!.InsertOneAsync(Player)!;
            await PlayerUniques!.InsertOneAsync(new PlayerUnique
            {
                Id = Player.Id,
                Nickname = Player.Nickname,
                location = Player.location
            }
            )!;

            var new_dest = "/playerHome?location=" + Player.location + "&Nickname=" + Player.Nickname + "&EventId=" + Event.Id;
            NavigationManager!.NavigateTo( new_dest );
            //NavigationManager!.NavigateTo("/done");
        }
    }

    private async Task LoginPlayer()
    {
        // basic checks
        if ( (Player == null) || (Player.Nickname == null) )
        {
            message = "[enter your nickname]";
            return;
        }    

        message = "";
        var filter = new BsonDocument("Nickname", Player.Nickname);
        PlayerUnique existingPlayer = PlayerUniques.Find<PlayerUnique>(filter).FirstOrDefault<PlayerUnique>();
        if (existingPlayer != null)
        {
            var new_dest = "/playerHome?location=" + existingPlayer.location + "&Nickname=" + existingPlayer.Nickname + "&EventId=" + Event.Id;
            NavigationManager!.NavigateTo( new_dest );
        }
        else
        {
            message = "[" + Player.Nickname + "] not found. Register instead?";
        }
    }

    private async Task AutoCompleteNickname(ChangeEventArgs e)
    {
        string input = e.Value.ToString();

        if (input.Length >= 2)
        {

            var nicknames = await PlayerUniques.Aggregate()
                .Search(Builders<PlayerUnique>
                    .Search.Autocomplete(p => p.Nickname, input), indexName: "autocomplete")
                .Project<PlayerUnique>(Builders<PlayerUnique>
                    .Projection
                    .Include(p => p.Nickname)
                    .Exclude(p => p.Id))
                .Limit(10)
                .ToListAsync();

            suggestedNicknames = nicknames.Select(p => p.Nickname).ToList();
        }
        else
        {
            suggestedNicknames.Clear();
            FocusedSuggestionIndex = -1;
        }
    }



    void SelectNickname(string Nickname)
    {
        Player.Nickname = Nickname;
        // reset
        suggestedNicknames.Clear();
        FocusedSuggestionIndex = -1;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowUp") {
            if (FocusedSuggestionIndex > 0) {
                FocusedSuggestionIndex--;
            }
        }
        else if (e.Key == "ArrowDown") {
            if (FocusedSuggestionIndex < suggestedNicknames.Count - 1) {
                FocusedSuggestionIndex++;
            }            
        }
        else if (e.Key == "Enter" && FocusedSuggestionIndex >= 0) {
            // SelectSuggestion(Suggestions[FocusedSuggestionIndex]);
        }
    }
}