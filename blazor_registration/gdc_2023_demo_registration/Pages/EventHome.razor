@page "/eventHome"
@using MongoDB.Driver
@using MongoDB.Bson
@using gdc_2023_demo_registration.Data

@inject NavigationManager NavigationManager
@inject IMongoCollection<Recording> Recordings
@inject IMongoCollection<Event> Events

<style>
    body {
        background-color: #023430;
    }

    .atlascharts_iframe {
        /*background: #21313C; */
        border: none;
        border-radius: 2px;
        /* box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2); */
        width: 1200px;
        height: 950px;
        margin: auto;
    }
</style>

<div class="card bg-white">
    <article class="card-body mx-auto" style="max-width: 400px;">
        <h2 class="text-center">Event Dashboard</h2>
        <h4 class="card-title mt-3 text-center">
            <b>
                @if ((@Event != null)  && (@Event.name != null)) {
                    <span>@Event.name</span>
                }
                else {
                    <span>[Unspecified Event]</span>
                }
            </b>
        </h4>
    </article>
</div> 


@if (chartUrl.Length == 0) {
    <p><em>Loading...</em></p>
}
else {
    <div class="row">
        <iframe class="atlascharts_iframe" src="@chartUrl"></iframe>
    </div>
}

@code {
    // default event, if no param
    private string chartUrl = "";
    private string location = "US-CA";
    private string EventId = "mdb-local-2023-socal";

    private Event? Event { get; set; }

    Dictionary<string, string>? queryParameters;

    protected override void OnInitialized()
    {
        try
        {
            var uri = new Uri(NavigationManager.Uri);

            
            queryParameters = uri.Query.TrimStart('?')
                .Split('&')
                .ToDictionary(
                    x => Uri.UnescapeDataString(x.Split('=')[0]),
                    x => Uri.UnescapeDataString(x.Split('=')[1])
                );

            location = queryParameters["location"];
            EventId = queryParameters["EventId"];
            
            // possibly a cleaner way to acquire URL aprams
            /*
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            location = query["location"];
            EventId = query["EventId"];
            */
      
            Event = Events
                .Find(e => e.Id.Equals(EventId))
                .First<Event>();

            Console.WriteLine(location);
            Console.WriteLine(EventId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        // OLD STUFF. Kept it for reference
        // delete after Q&A
        // chartUrl = "https://charts.mongodb.com/charts-global_shared-jebkk/embed/dashboards?id=6453fb66-c2fc-4212-8dbd-4ab8365f1ac0&theme=light&autoRefresh=true&maxDataAge=60&showTitleAndDesc=false&scalingWidth=fixed&scalingHeight=fixed";
        // chartUrl += "&filter={%27location%27:%27" + location + "%27,%27Event._id%27:%27" + EventId + "%27}";

        string atlasChartEmbedDashboardURL = "https://charts.mongodb.com/charts-global_shared-jebkk/embed/dashboards";

        // eventHome dashboard
        // https://charts.mongodb.com/charts-global_shared-jebkk/dashboards/6453fb66-c2fc-4212-8dbd-4ab8365f1ac0#
        string atlasChartID = "6453fb66-c2fc-4212-8dbd-4ab8365f1ac0"; 

        string tmpchartUrl = atlasChartEmbedDashboardURL;

        tmpchartUrl += "?id=" + atlasChartID; // FIRST parameter. This typically changed for each route of the website
        tmpchartUrl += "&theme=light"; // or dark
        tmpchartUrl += "&autoRefresh=true";
        tmpchartUrl += "&maxDataAge=60";
        tmpchartUrl += "&showTitleAndDesc=false";
        tmpchartUrl += "&scalingWidth=100%25"; // 100% url-encoded
        tmpchartUrl += "&scalingHeight=fixed";
        tmpchartUrl += "&showAttribution=false";
        tmpchartUrl += "&filter={%27Event._id%27:%27" + Event.Id + "%27,%27location%27:%27" + Event.location + "%27}"; // json, url-encoded object {'Event._id':'my-event','location':'XX-XX'}

        chartUrl = tmpchartUrl;
    }
}
