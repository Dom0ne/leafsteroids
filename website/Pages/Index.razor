@page "/"
@using MongoDB.Driver
@using website.Data
@using Microsoft.AspNetCore.WebUtilities
@using MongoDB.Bson
@using website.Utils

@inject NavigationManager NavigationManager
@inject IMongoCollection<Player> Players
@inject IMongoCollection<PlayerUnique> PlayerUniques
@inject IMongoCollection<Event> Events


<style>
    body {
        background-color: #023430;
    }

    .chartsiframe {
        background: #F1F5F4;
        border: none;
        border-radius: 2px;
        box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);
        width: 100%;
        height: 90vh;
    }
</style>
<a href="\?EventId=@_eventId">
    <img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">
</a>
<div class="card bg-white">
    <article class="card-body mx-auto" style="max-width: 400px;">
        <h2 class="text-center">Player Registration & Login</h2>
        <h4 class="card-title mt-3 text-center">
            <b>
                @if ((_event != null))
                {
                    if ((_event.location != null) && (_event.name != null))
                    {
                        <a href="/eventHome/?location=@_event.location&EventId=@_event.Id">@_event.name</a>
                    }
                    else
                    {
                        @_event.name
                    }
                }
            </b>
        </h4>
        <h4 class="card-title mt-3 text-center">
            <b class="validation-message">@_message</b>
        </h4>

        <form>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-user"></i>
                    </span>
                </div>
                <input id="nickname"
                       type="text"
                       class="form-control"
                       placeholder="Nickname (case sensitive!)"
                       @bind="Player!.Nickname" name=""
                       @oninput="AutoCompleteNickname"
                       required>

                @if (_suggestedNicknames.Count > 0)
                {
                    <div class="autocomplete">
                        <ul class="options">
                            @foreach (var nickname in _suggestedNicknames)
                            {
                                <li id="option_@nickname"
                                    class="option"
                                    @onclick=@(_ => SelectNickname(nickname))>
                                    @nickname <!-- visible suggestion -->
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-users"></i>
                    </span>
                </div>
                <input id="teamname" @bind="Player.TeamName" name="" class="form-control" placeholder="Team Name (optional)" type="text">
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-comment"></i>
                    </span>
                </div>
                <input id="email" @bind="Player.Email"
                       name=""
                       class="form-control"
                       placeholder="E-Mail for prizes (optional)"
                       type="email">
            </div> <!-- form-group// -->


            <div class="form-group">
                <div class="text-center">
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64" @onclick="CreatePlayer"> Register </button>
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64" @onclick="LoginPlayer"> Login </button>
                </div>
            </div> <!-- form-group// -->
        </form>
    </article>
</div> <!-- card.// -->

<div class="card bg-white">
    @if (_chartUrl.Length == 0)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="iframe-wrapper">
            <iframe class="chartsiframe" src="@_chartUrl"></iframe>
        </div>
    }
</div>

@code {

    private string _message = "";
    private string _chartUrl = "";
    private Player? Player { get; set; } = new Player();
    private string _eventId = Constants.DefaultEventId;
    private Event? _event;
    private List<string> _suggestedNicknames = new List<string>();

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);

        if (queryParameters.TryGetValue("event", out var queryParameter))
        {
            _eventId = queryParameter!;
        }
        else
        {
            if (queryParameters.TryGetValue("EventId", out var parameter))
            {
                _eventId = parameter!;
            }
            else
            {
                _eventId = Constants.DefaultEventId;
            }
        }
        BsonDocument eventFilter = new BsonDocument("_id", _eventId);

        _event = Events.FindSync(eventFilter).Single<Event>();

        var chartsUrl = ChartsUrl.CreateHomeUrl(Constants.AtlasChartIdHome, _event.Id, _event.location!);

        _chartUrl = chartsUrl;
    }

    private async Task CreatePlayer()
    {
        if (Player?.Nickname == null || _event?.location == null)
        {
            _message = "[please fill out the form]";
            return;
        }

        _message = "";
        var filter = new BsonDocument("Nickname", Player.Nickname);

        if (await PlayerUniques.Find<PlayerUnique>(filter).AnyAsync<PlayerUnique>())
        {
            _message = "[" + Player.Nickname + "] exists! Login instead?";
        }
        else
        {
            Player.location = _event.location;

            await Players!.InsertOneAsync(Player)!;
            await PlayerUniques!.InsertOneAsync(new PlayerUnique
            {
                Id = Player.Id,
                Nickname = Player.Nickname,
                location = Player.location
            }
                )!;

            var newDest = "/playerHome?location=" + Player.location + "&Nickname=" + Player.Nickname + "&EventId=" + _event.Id;
            NavigationManager!.NavigateTo(newDest);
            NavigationManager!.NavigateTo("/playerHome?location=" + _event.location + "&Nickname=" + Player.Nickname + "&EventId=" + _event.Id);
        }
    }

    private void LoginPlayer()
    {
        if (Player?.Nickname == null)
        {
            _message = "[enter your nickname]";
            return;
        }

        _message = "";
        var filter = new BsonDocument("Nickname", Player.Nickname);
        var existingPlayer = PlayerUniques.Find<PlayerUnique>(filter).FirstOrDefault<PlayerUnique>();
        if (existingPlayer != null)
        {
            NavigationManager!.NavigateTo("/playerHome?location=" + _event!.location + "&Nickname=" + existingPlayer.Nickname + "&EventId=" + _event.Id);
        }
        else
        {
            _message = "[" + Player.Nickname + "] not found. Register instead?";
        }
    }

    private async Task AutoCompleteNickname(ChangeEventArgs e)
    {
        string input = e.Value!.ToString()!;

        if (input.Length >= 2)
        {
            var nicknames = await PlayerUniques.Aggregate()
                .Search(Builders<PlayerUnique>
                    .Search.Autocomplete(p => p.Nickname, input), indexName: "autocomplete")
                .Project<PlayerUnique>(Builders<PlayerUnique>
                    .Projection
                    .Include(p => p.Nickname)
                    .Exclude(p => p.Id))
                .Limit(10)
                .ToListAsync();

            _suggestedNicknames = nicknames.Select(p => p.Nickname).ToList()!;
        }
        else
        {
            _suggestedNicknames.Clear();
        }
    }


    void SelectNickname(string nickname)
    {
        Player!.Nickname = nickname;
        _suggestedNicknames.Clear();
    }

}