@page "/"
@using RestSharp
@using website.Data
@using website.Utils

@inject NavigationManager NavigationManager


<style>
    body {
        background-color: #023430;
    }

    .chartsiframe {
        background: #F1F5F4;
        border: none;
        border-radius: 2px;
        box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);
        width: 100%;
        height: 90vh;
    }
</style>
<a href="\?EventId=@_eventId">
    <img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">
</a>
<div class="card bg-white">
    <article class="card-body mx-auto" style="max-width: 400px;">
        <h2 class="text-center">Player Registration & Login</h2>
        <h4 class="card-title mt-3 text-center">
            <b>
                @if ((_event != null))
                {
                    if ((_event.location != null) && (_event.name != null))
                    {
                        <a href="/eventHome/?location=@_event.location&EventId=@_event.Id">@_event.name</a>
                    }
                    else
                    {
                        @_event.name
                    }
                }
            </b>
        </h4>
        <h4 class="card-title mt-3 text-center">
            <b class="validation-message">@_errorMessage</b>
        </h4>

        <form>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-user"></i>
                    </span>
                </div>
                <input id="nickname"
                       type="text"
                       class="form-control"
                       placeholder="Nickname (case sensitive!)"
                       @bind="Player.Nickname" name=""
                       @oninput="AutoCompleteNickname"
                       required>

                @if (_suggestedNicknames.Count > 0)
                {
                    <div class="autocomplete">
                        <ul class="options">
                            @foreach (var nickname in _suggestedNicknames)
                            {
                                <li id="option_@nickname"
                                    class="option"
                                    @onclick=@(_ => SelectNickname(nickname))>
                                    @nickname <!-- visible suggestion -->
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-users"></i>
                    </span>
                </div>
                <input id="teamname" @bind="Player.TeamName" name="" class="form-control" placeholder="Team Name (optional)" type="text">
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-comment"></i>
                    </span>
                </div>
                <input id="email" @bind="Player.Email"
                       name=""
                       class="form-control"
                       placeholder="E-Mail for prizes (optional)"
                       type="email">
            </div> <!-- form-group// -->


            <div class="form-group">
                <div class="text-center">
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64" @onclick="CreatePlayer"> Register </button>
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64" @onclick="LoginPlayer"> Login </button>
                </div>
            </div> <!-- form-group// -->
        </form>
    </article>
</div> <!-- card.// -->

<div class="card bg-white">
    @if (_chartUrl.Length == 0)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="iframe-wrapper">
            <iframe class="chartsiframe" src="@_chartUrl"></iframe>
        </div>
    }
</div>

@code {

    private Player Player { get; } = new();
    private List<string> _suggestedNicknames = new();
    private Event? _event;
    private string _eventId = string.Empty;
    private string _chartUrl = string.Empty;
    private string _errorMessage = string.Empty;
    private readonly RestClient _restClient = RestServiceClient.Create();

    protected override async Task OnInitializedAsync()
    {
        await SetEventFromUrlParameters();
        _chartUrl = ChartsUrl.CreateHomeUrl(Constants.AtlasChartIdHome, _event!.Id, _event.location!);
    }

    private async Task SetEventFromUrlParameters()
    {
        var queryParameters = UrlHelper.GetParameters(NavigationManager.Uri);
        _eventId = queryParameters.TryGetValue(Constants.QueryParameterEventId, out var eventIdValue) ? eventIdValue :
            queryParameters.TryGetValue("event", out var eventValue) ? eventValue :
                Constants.DefaultEventId;

        var events = await _restClient.GetJsonAsync<List<Event>>(Constants.RestServiceEndpointEvents);
        var filteredEvents = events!.FindAll(e => e.Id.Equals(_eventId));
        _event = filteredEvents.FirstOrDefault();
    }

    private async Task CreatePlayer()
    {
        if (string.IsNullOrEmpty(Player.Nickname) || string.IsNullOrEmpty(_event?.location))
        {
            _errorMessage = "[please fill out the form]";
            return;
        }

        _errorMessage = "";

        var playersUnique = await _restClient.GetJsonAsync<List<PlayerUnique>>(Constants.RestServiceEndpointPlayersUnique);
        var filteredPlayersUnique = playersUnique!.FindAll(p => p.Nickname!.Equals(Player.Nickname));
        var existingPlayer = filteredPlayersUnique.FirstOrDefault();

        if (existingPlayer != null)
        {
            _errorMessage = $"[{Player.Nickname}] exists! Login instead?";
        }
        else
        {
            Player.Location = _event.location;

    // await Players!.InsertOneAsync(Player)!;
    // await PlayerUniques!.InsertOneAsync(new PlayerUnique
    // {
    //     Id = Player.Id,
    //     Nickname = Player.Nickname,
    //     Location = Player.Location
    // }
    //     )!;

            var request = new RestRequest(Constants.RestServiceEndpointPlayers).AddJsonBody(Player);
            var response = await _restClient.PostAsync<Player>(request);

            var newDestination = UrlForPlayer(Player.Location, Player.Nickname, _event.Id);
            NavigationManager!.NavigateTo(newDestination);
        }
    }

    private async Task LoginPlayer()
    {
        if (string.IsNullOrEmpty(Player.Nickname))
        {
            _errorMessage = "[Enter your nickname!]";
            return;
        }

        _errorMessage = "";

        var playersUnique = await _restClient.GetJsonAsync<List<PlayerUnique>>(Constants.RestServiceEndpointPlayersUnique);
        var filteredPlayersUnique = playersUnique!.FindAll(p => p.Nickname!.Equals(Player.Nickname));
        var existingPlayer = filteredPlayersUnique.FirstOrDefault();

        if (existingPlayer != null)
        {
            var newDestination = UrlForPlayer(_event!.location!, existingPlayer.Nickname!, _event.Id);
            NavigationManager!.NavigateTo(newDestination);
        }
        else
        {
            _errorMessage = $"[{Player.Nickname}] not found. Register instead?";
        }
    }

    private async Task AutoCompleteNickname(ChangeEventArgs e)
    {
    // var input = e.Value!.ToString()!;

    // if (input.Length >= 2)
    // {
    //     var nicknames = await PlayerUniques
    //         .Aggregate()
    //         .Search(Builders<PlayerUnique>
    //             .Search
    //             .Autocomplete(p => p.Nickname, input), indexName: "autocomplete")
    //         .Project<PlayerUnique>(Builders<PlayerUnique>
    //             .Projection
    //             .Include(p => p.Nickname)
    //             .Exclude(p => p.Id))
    //         .Limit(10)
    //         .ToListAsync();
    //
    //     _suggestedNicknames = nicknames.Select(p => p.Nickname).ToList()!;
    // }
    // else
    // {
        _suggestedNicknames.Clear();
    // }
    }

    private void SelectNickname(string nickname)
    {
        Player.Nickname = nickname;
        _suggestedNicknames.Clear();
    }

    private static string UrlForPlayer(string location, string nickname, string eventId)
    {
        var newDestination = "/playerHome?location=" + location + "&Nickname=" + nickname + "&EventId=" + eventId;
        return newDestination;
    }

}