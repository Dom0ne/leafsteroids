@page "/"
@using RestSharp
@using website.Data
@using website.Utils
@using dotenv.net

@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<style>
    body {
        background-color: #023430;
    }

    .chartsiframe {
        background: #F1F5F4;
        border: none;
        border-radius: 2px;
        box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);
        width: 100%;
        height: 90vh;
    }
</style>
<a href="/">
    <img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">
</a>
<div class="card" style="max-width:400px;background:yellow;text-align:center">
    <div style="display:inline">
        <a href="https://www.mongodb.com/solutions/solutions-library/gaming-player-profiles-solution"
            target="_blank">Solution</a>
        &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
        <a href="https://www.mongodb.com/use-cases/gaming" target="_blank">MDB for Gaming</a>
        &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
        <a href="https://github.com/mongodb-developer/leafsteroids" target="_blank">GitHub</a>
    </div>
</div>
<div class="card bg-white">
    <article class="card-body mx-auto" style="max-width: 400px;">

        <h4 class="card-title mt-3 text-center">
            <h2 class="text-center">Registration & Login</h2>
        </h4>

        <h4 class="card-title mt-3 text-center">
            <b class="validation-message">@_errorMessage</b>
        </h4>

        <form>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-user"></i>
                    </span>
                </div>
                <input id="name" type="text" class="form-control" placeholder="Nickname (case sensitive! no spaces!)"
                       @bind="Player.Name" name="" @oninput="AutoCompleteName" required pattern="/^[a-zA-Z0-9_\-]+$/">


                <div id="autocomplete" class="autocomplete">
                    @if (_suggestedNames.Count > 0)
                    {
                        <ul class="options">
                            @foreach (var name in _suggestedNames)
                            {
                                <li id="option_@name" class="option" @onclick=@(_ => SelectName(name))>
                                    @name <!-- visible suggestion -->
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-users"></i>
                    </span>
                </div>
                <input id="teamname" @bind="Player.Team" name="" class="form-control" placeholder="Team Name (optional)"
                       type="text">
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-comment"></i>
                    </span>
                </div>
                <input id="email" @bind="Player.Email" name="" class="form-control"
                       placeholder="E-Mail for prizes (optional)" type="email"
                       pattern="/^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/">
            </div> <!-- form-group// -->


            <div class="form-group">
                <div class="text-center">
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64"
                            @onclick="CreatePlayer">
                        Register
                    </button>
                    <button type="button" class="btn btn-block center" style="background-color:#00ed64"
                            @onclick="CreatePlayer">
                        Login
                    </button>
                </div>
            </div> <!-- form-group// -->
        </form>
    </article>
</div> <!-- card.// -->

@code {
    private Player Player { get; } = new();
    private List<string> _suggestedNames = new();
    private string _errorMessage = string.Empty;
    private readonly RestClient _restClient = RestServiceClient.Create();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeAsync<string>("enableListener");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        DotEnv.Load();
        var envVars = DotEnv.Read();
    }

    private async Task CreatePlayer()
    {
        if (string.IsNullOrEmpty(Player.Name))
        {
            _errorMessage = "[please fill out the form]";
            return;
        }

        _errorMessage = "";

        var playersUnique = await _restClient.GetJsonAsync<List<Player>>(Constants.RestServiceEndpointPlayers);
        var filteredPlayersUnique = playersUnique!.FindAll(p => p.Name!.Equals(Player.Name));
        var existingPlayer = filteredPlayersUnique.FirstOrDefault();

        if (existingPlayer != null)
        {
            _errorMessage = $"[{Player.Name}] exists! Login instead?";
        }
        else
        {
            Player.Location = "US"; // TO-DO Obtain from autocomplete input box

            var request = new RestRequest(Constants.RestServiceEndpointPlayers).AddJsonBody(Player);
            await _restClient.PostAsync<Player>(request);

            var newDestination = UrlForPlayer(Player.Location, Player.Name);
            NavigationManager!.NavigateTo(newDestination);
        }
    }

    private async Task LoginPlayer()
    {
        if (string.IsNullOrEmpty(Player.Name))
        {
            _errorMessage = "[Enter your name!]";
            return;
        }

        _errorMessage = "";

        var args = new Dictionary<string, string>
        {
            { "Name", Player.Name }
        };

        string urlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointPlayers, args);

        var players = await _restClient.GetJsonAsync<List<Player>>(urlWithQuery);
        var filteredPlayers = players!.FindAll(p => p.Name!.Equals(Player.Name));
        var existingPlayer = filteredPlayers.FirstOrDefault();

        if (existingPlayer != null)
        {
            var newDestination = UrlForPlayer("US", existingPlayer.Name!); // TO-DO Obtain from autocomplete input box
            NavigationManager!.NavigateTo(newDestination);
        }
        else
        {
            _errorMessage = $"[{Player.Name}] not found. Register instead?";
        }
    }

    private async Task AutoCompleteName(ChangeEventArgs e)
    {
        var input = e.Value!.ToString()!;

        if (input.Length >= 3)
        {

            var args = new Dictionary<string, string>
            {
                { "Name", input }
            };

            string urlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointPlayersAutoComplete, args);

            var names = await _restClient.GetJsonAsync<List<string>>(urlWithQuery);

            _suggestedNames = names;
            await JS.InvokeAsync<string>("showAutoComplete");

        }
        else
        {
            _suggestedNames.Clear();
        }
    }

    private void SelectName(string name)
    {
        Player.Name = name;
        _suggestedNames.Clear();
    }

    private static string UrlForPlayer(string location, string name)
    {
        var newDestination = "/playerHome?location=" + location + "&Name=" + name + "&hack=1"; // hack for players with trailing space
        return newDestination;
    }

}