@page "/playerHome"
@using MongoDB.Driver
@using website.Data
@using website.Utils

@inject NavigationManager NavigationManager
@inject IMongoCollection<Player> Players
@inject IMongoCollection<PlayerUnique> PlayersUnique
@inject IMongoCollection<Event> Events

<style>
    /* this in inside the body tag */
    body {
        background-color: #023430;
    }

    .atlascharts_iframe {
        /*background: #21313C; */
        border: none;
        border-radius: 2px;
        /* box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2); */
        width: 100%;
        height: 200vh;
        margin: auto;
    }
</style>

<a href="\?EventId=@_eventId">
    <img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">
</a>
<div class="card bg-white">
    <article class="card-body mx-auto" style="max-width: 400px;">
        <h2 class="text-center">Player Dashboard</h2>
        <h4 class="card-title mt-3 text-center">
            <b>@Event!.name</b>
        </h4>
        <h4 class="card-title mt-3 text-center">
            <b class="validation-message">@_message</b>
        </h4>

        <form>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-user"></i>
                    </span>
                </div>
                <input id="nickname" @bind="Player.Nickname" name="" class="form-control" placeholder="" type="text" disabled>
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-users"></i>
                    </span>
                </div>
                <input id="teamname" @bind="Player.TeamName" name="" class="form-control" placeholder="" type="text" disabled>
            </div> <!-- form-group// -->

            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-comment"></i>
                    </span>
                </div>
                <input id="email" @bind="Player.Email" name="" class="form-control" placeholder="" type="text" disabled>
            </div> <!-- form-group// -->
        </form>

    </article>
</div> <!-- card.// -->


<div class="card bg-white">
    @if (_chartUrl.Length == 0)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <iframe class="atlascharts_iframe" src="@_chartUrl"></iframe>
    }
</div>


@code {

    private string _message = "";
    private string _chartUrl = "";
    private string _location = "";
    private string _nickname = "";
    private string _eventId = "";

    private Player Player { get; set; } = new Player();
    private Event? Event { get; set; }

    Dictionary<string, string>? _queryParameters;

    protected override void OnInitialized()
    {
        try
        {
            var uri = new Uri(NavigationManager.Uri);

            _queryParameters = uri.Query.TrimStart('?')
                .Split('&')
                .ToDictionary(
                    x => Uri.UnescapeDataString(x.Split('=')[0]),
                    x => Uri.UnescapeDataString(x.Split('=')[1])
                );

            _location = _queryParameters["location"];
            _nickname = _queryParameters["Nickname"];
            _eventId = _queryParameters["EventId"];

            Event = Events
                .Find(e => e.Id.Equals(_eventId))
                .First<Event>();

            PlayerUnique playerUnique = PlayersUnique
                .Find(p => p.Nickname!.Equals(_nickname))
                .First<PlayerUnique>();

            Player = Players
                .Find(p => p.location!.Equals(playerUnique.location) &&
                           p.Nickname!.Equals(playerUnique.Nickname))
                .First<Player>();

            _chartUrl = ChartsUrl.CreatePlayerUrl(Constants.AtlasChartIdPlayer, _nickname, _location, _eventId);
        }
        catch (Exception)
        {
            _message = "PLAYER NOT FOUND";
        }
    }

}