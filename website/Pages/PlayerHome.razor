@page "/playerHome"
@using RestSharp
@using website.Data
@using website.Utils
@using dotenv.net

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject IJSRuntime JSRuntime

<style>
    /* this in inside the body tag */
    body {
        background-color: #023430;
    }

    .atlascharts_iframe {
        /*background: #21313C; */
        border: none;
        border-radius: 2px;
        /* box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2); */
        width: 100%;
        height: 200vh;
        margin: auto;
    }
</style>

<a href="/PlayerHome?Name=@Player.Name">
    <img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">
</a>
<div class="card" style="max-width:400px;background:yellow;text-align:center">
    <div style="display:inline">
        <a href="https://www.mongodb.com/solutions/solutions-library/gaming-player-profiles-solution" target="_blank">Solution</a>
        &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
        <a href="https://www.mongodb.com/use-cases/gaming" target="_blank">MDB for Gaming</a>
        &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
        <a href="https://github.com/mongodb-developer/leafsteroids" target="_blank">GitHub</a>
    </div>
</div>
<div class="card bg-white">
    @if (!ready)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <!-- Player Details -->
        <article class="card-body mx-auto" style="max-width: 400px;">
            <h2 class="text-center">Player Home</h2>
            <h4 class="card-title mt-3 text-center">
                <b class="validation-message">@_errorMessage</b>
            </h4>

            <form>
                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-user"></i>
                        </span>
                    </div>
                    <input id="name" @bind="Player.Name" name="" class="form-control" placeholder="" type="text" disabled>
                </div> <!-- form-group// -->

                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-users"></i>
                        </span>
                    </div>
                    <input id="teamname" @bind="Player.Team" name="" class="form-control" placeholder="" type="text"
                           disabled>
                </div> <!-- form-group// -->

                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-comment"></i>
                        </span>
                    </div>
                    <input id="email" @bind="Player.Email" name="" class="form-control" placeholder="" type="text" disabled>

                </div> <!-- form-group// -->

            </form>

        </article>


        <!-- Event Creation -->
        <article class="card-body mx-auto" style="max-width: 400px;">
            <h2 class="text-center">New Event</h2>
            <h4 class="card-title mt-3 text-center">
                <b class="validation-message">@_errorMessage</b>
            </h4>

            <form>
                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa-solid fa-barcode"></i>
                        </span>
                    </div>
                    <input id="eventId" @bind="Event.Id" name="" class="form-control"
                           placeholder="event-id (lower & hyphenated)" type="text" pattern="/^[a-z0-9\-]+$/">
                </div> <!-- form-group// -->

                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa-solid fa-comment-dots"></i>
                        </span>
                    </div>
                    <input id="eventName" @bind="Event.Name" name="" class="form-control"
                           placeholder="Friendly description" type="text">
                </div> <!-- form-group// -->

                <!-- TO DO: Obtain location from autocomplete box -->

                <div class="form-group">
                    <div class="text-center">
                        <button type="button" class="btn btn-block center" style="background-color:#00ed64"
                                @onclick="CreateEvent">
                            Create Event
                        </button>
                    </div>
                </div> <!-- form-group// -->

            </form>

        </article>

        <article class="card-body mx-auto" style="max-width: 400px;">
            <h2 class="text-center">Your Events</h2>
            <center>
                @foreach (Event evt in Events)
                {
                    <h4 class="text-center">
                        <a href="@UrlForPlayerAndEvent(evt.Location, Player.Name, evt.Id)" target="_blank">@evt.Id</a>
                    </h4>
                    <h6>@evt.Name</h6>
                    <h6>&nbsp;</h6>

                }
            </center>
        </article>
    }

</div> <!-- card.// -->

@code {

    private Event Event { get; set; } = new();
    private List<Event> Events { get; set; } = new();
    private Player Player { get; set; } = new();
    private string _location = string.Empty;
    private string _name = string.Empty;
    private string _errorMessage = string.Empty;
    private readonly RestClient _restClient = RestServiceClient.Create();
    private bool ready = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var queryParameters = UrlHelper.GetParameters(NavigationManager.Uri);

            _name = queryParameters[Constants.QueryParameterName];

            // Get Player
            var playerFilter = new Dictionary<string, string>
            {
                { "name", _name }
            };

            string playersUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointPlayers, playerFilter);
            var players = await _restClient.GetJsonAsync<List<Player>>(playersUrlWithQuery);

            Player = players.First();
            _location = Player.Location;

            // Get Player Events
            string playersEventsUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointPlayersEvents, playerFilter);
            var evts = await _restClient.GetJsonAsync<List<Event>>(playersEventsUrlWithQuery);
            Events = evts.ToList<Event>();

            ready = Player != null && Events != null;

            DotEnv.Load();
            var envVars = DotEnv.Read();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
            _errorMessage = "PLAYER NOT FOUND";
        }
    }

    private async Task CreateEvent()
    {
        if (string.IsNullOrEmpty(Event.Id) || string.IsNullOrEmpty(Event.Name))
        {
            _errorMessage = "[please fill out the Event ID and Name]";
            return;
        }

        _errorMessage = "";

        var args = new Dictionary<string, string>
        {
            { "id", Event.Id }
        };

        string urlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointEvents, args);

        var events = await _restClient.GetJsonAsync<List<Event>>(urlWithQuery);
        var existingEvent = events.FirstOrDefault();

        if (existingEvent != null)
        {
            _errorMessage = $"THIS EVENT ALREADY EXISTS!!!";
        }
        else
        {
            Event.Location = _location; // TO-DO

            var request = new RestRequest(Constants.RestServiceEndpointEvents).AddJsonBody(Event);
            await _restClient.PostAsync<Player>(request);

            var newDestination = UrlForPlayerAndEvent(Event.Location, Player.Name, Event.Id);
            NavigationManager!.NavigateTo(newDestination);
        }
    }

    private static string UrlForPlayerAndEvent(string location, string name, string eventId)
    {
        var newDestination = "/playerEventHome?location=" + location + "&Name=" + name + "&EventId=" + eventId;
        return newDestination;
    }

}