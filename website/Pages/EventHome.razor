@page "/eventHome"
@using MongoDB.Driver
@using website.Data
@using website.Utils

@inject NavigationManager NavigationManager
@inject IMongoCollection<Event> Events

<style>
    body {
        background-color: #023430;
    }

    .atlascharts_iframe {
        /*background: #21313C; */
        border: none;
        border-radius: 2px;
        /* box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2); */
        width: 1200px;
        height: 950px;
        margin: auto;
    }
</style>
<a href="\?EventId=@_eventId">
    <img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">
</a>
<div class="card bg-white">
    <article class="card-body mx-auto" style="max-width: 400px;">
        <h2 class="text-center">Event Dashboard</h2>
        <h4 class="card-title mt-3 text-center">
            <b>
                @if (Event?.name != null)
                {
                    <span>@Event.name</span>
                }
                else
                {
                    <span>[Unspecified Event]</span>
                }
            </b>
        </h4>
    </article>
</div>


@if (_chartUrl.Length == 0)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row">
        <iframe class="atlascharts_iframe" src="@_chartUrl"></iframe>
    </div>
}

@code {

    private string _chartUrl = "";
    private string _location = "US-CA";
    private string _eventId = "mdb-local-2023-socal";
    private Event? Event { get; set; }
    private Dictionary<string, string>? _queryParameters;

    protected override void OnInitialized()
    {
        try
        {
            var uri = new Uri(NavigationManager.Uri);


            _queryParameters = uri.Query.TrimStart('?')
                .Split('&')
                .ToDictionary(
                    x => Uri.UnescapeDataString(x.Split('=')[0]),
                    x => Uri.UnescapeDataString(x.Split('=')[1])
                );

            _location = _queryParameters["location"];
            _eventId = _queryParameters["EventId"];

            Event = Events
                .Find(e => e.Id.Equals(_eventId))
                .First<Event>();

            Console.WriteLine(_location);
            Console.WriteLine(_eventId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        _chartUrl = ChartsUrl.CreateEventUrl(Constants.AtlasChartIdEvent, Event!.Id, Event.location!);
    }

}