@page "/playerSimilar"
@using RestSharp
@using website.Data
@using website.Utils
@using dotenv.net

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject IJSRuntime JSRuntime

<style>
    /* this in inside the body tag */
    body {
        background-color: #023430;
    }

    .atlascharts_iframe {
        /*background: #21313C; */
        border: none;
        border-radius: 2px;
        /* box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2); */
        width: 100%;
        height: 200vh;
        margin: auto;
    }
</style>

<img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">

<div class="card bg-white">
    @if (Player == null)
        {
        <p>
            <em>Loading...</em>
        </p>
        }
        else
        {
        <article class="card-body mx-auto" style="max-width: 400px;">
            <h2 class="text-center">Player Dashboard</h2>
            <h4 class="card-title mt-3 text-center">
                Similar Players by Speed and Acceleration
            </h4>
            <h4 class="card-title mt-3 text-center">
                <b class="validation-message">@_errorMessage</b>
            </h4>

            <form>
                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-user"></i>
                        </span>
                    </div>
                    <input id="name" @bind="Player.Name" name="" class="form-control" placeholder="" type="text" disabled>
                </div> <!-- form-group// -->

                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-users"></i>
                        </span>
                    </div>
                    <input id="teamname" @bind="Player.Team" name="" class="form-control" placeholder="" type="text"
                        disabled>
                </div> <!-- form-group// -->

                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-comment"></i>
                        </span>
                    </div>
                    <input id="email" @bind="Player.Email" name="" class="form-control" placeholder="" type="text" disabled>

                </div> <!-- form-group// -->

                <div class="text-center">
                    <a href="/player.html" style="background-color:#00ed64" target="_blank" class="btn btn-block center">Play Now</a>
                </div>
            </form>

        </article>
        }

</div> <!-- card.// -->


<div class="card bg-white">
    @if (Player == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <h4 class="card-title mt-3 text-center">Similar Players by Speed</h4>
        // Iterate through every similar by speed
        foreach (SimilarRecordings rec in SimilarBySpeed)
        {
            //TO-DO: Get Chart URL and ID from helper and env constants
            <h5>@rec.Name</h5>
            string chartUrl = string.Concat("https://charts.mongodb.com/charts-aws-reinvent-2023-bojgz/embed/charts?id=0a7ef9ba-e9ab-40dc-b291-a8c836d39381&maxDataAge=3600&theme=light&autoRefresh=true",
                "&filter={%27_id%27:{%27$oid%27:%27",
                rec.Id.ToString(),
                "%27}}");
            <iframe style="background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);" width="480" height="480" src=@chartUrl></iframe>
        }
    }
</div>


@code {

    private Player Player { get; set; } = new();
    private List<SimilarRecordings> SimilarBySpeed { get; set; } = new();
    //private List<SimilarRecordings> SimilarByAccel { get; set; } = new();

    private string _name = string.Empty;
    private string _chartUrl = string.Empty;
    private string _errorMessage = string.Empty;
    private readonly RestClient _restClient = RestServiceClient.Create();

    private string chartFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var queryParameters = UrlHelper.GetParameters(NavigationManager.Uri);

            _name = queryParameters[Constants.QueryParameterName];
            var playerFilter = new Dictionary<string, string>
            {
                { "name", _name }
            };

            string playersUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointPlayers, playerFilter);
            var players = await _restClient.GetJsonAsync<List<Player>>(playersUrlWithQuery);
            Player = players.First();

            string similarBySpeedUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointSimilarBySpeed, playerFilter);
            SimilarBySpeed = await _restClient.GetJsonAsync<List<SimilarRecordings>>(similarBySpeedUrlWithQuery);

            //string similarByAccelUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointSimilarByAccel, playerFilter);
            //SimilarByAccel = await _restClient.GetJsonAsync<List<SimilarRecordings>>(similarByAccelUrlWithQuery);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
            _errorMessage = "PLAYER NOT FOUND";
        }
    }
}