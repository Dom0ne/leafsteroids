@page "/playerSimilar"
@using RestSharp
@using website.Data
@using website.Utils
@using dotenv.net

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject IJSRuntime JSRuntime

<style>
    /* this in inside the body tag */
    body {
        background-color: #023430;
    }

    .atlascharts_iframe {
        /*background: #21313C; */
        border: none;
        border-radius: 2px;
        /* box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2); */
        width: 100%;
        height: 200vh;
        margin: auto;
    }
</style>

<a href="\?EventId=@_eventId">
    <img src="\mongodb-logo-green-bg.jpg" class="rounded mx-auto d-block" alt="logo">
</a>
<div class="card" style="max-width:400px;background:yellow;text-align:center">
    <div style="display:inline">
        <a href="https://www.mongodb.com/solutions/solutions-library/gaming-player-profiles-solution" target="_blank">Solution</a>
        &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
        <a href="https://www.mongodb.com/use-cases/gaming" target="_blank">MDB for Gaming</a>
        &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
        <a href="https://github.com/mongodb-developer/leafsteroids" target="_blank">GitHub</a>
    </div>
</div>
<div class="card bg-white">
    @if (Player == null)
        {
        <p>
            <em>Loading...</em>
        </p>
        }
        else
        {
        <article class="card-body mx-auto" style="max-width: 400px;">
            <h2 class="text-center">Player Dashboard</h2>
            <h4 class="card-title mt-3 text-center">
                Similar Players based on Highest Score, Speed and Acceleration
            </h4>
            <h4 class="card-title mt-3 text-center">
                <b class="validation-message">@_errorMessage</b>
            </h4>

            <form>
                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-user"></i>
                        </span>
                    </div>
                    <input id="name" @bind="Player.Name" name="" class="form-control" placeholder="" type="text" disabled>
                </div> <!-- form-group// -->

                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-users"></i>
                        </span>
                    </div>
                    <input id="teamname" @bind="Player.Team" name="" class="form-control" placeholder="" type="text"
                        disabled>
                </div> <!-- form-group// -->

                <div class="form-group input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fa fa-comment"></i>
                        </span>
                    </div>
                    <input id="email" @bind="Player.Email" name="" class="form-control" placeholder="" type="text" disabled>

                </div> <!-- form-group// -->
            </form>

        </article>
        }

</div> <!-- card.// -->


<div class="card bg-white">
    @if (Player == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <h4 class="card-title mt-3 text-center">Similar Players</h4>
            foreach (SimilarRecording rec in Similar)
            {
                string chartUrl = ChartsUrl.CreateSimilarUrl(_atlasChartIdSimilar, rec.Id);
                <center>
                    <h5>@rec.Name</h5>
                    <table style="width:60%;">
                        <tr>
                            <td>Score</td>
                            <td>@rec.SessionStatisticsPlain.Score</td>
                        </tr>
                        <tr>
                            <td>DamageDone</td>
                            <td>@rec.SessionStatisticsPlain.DamageDone</td>
                        </tr>
                        <tr>
                            <td>BulletsFired</td>
                            <td>@rec.SessionStatisticsPlain.BulletsFired</td>
                        </tr>
                        <tr>
                            <td>PelletsDestroyedLarge</td>
                            <td>@rec.SessionStatisticsPlain.PelletsDestroyedLarge</td>
                        </tr>
                        <tr>
                            <td>PelletsDestroyedMedium</td>
                            <td>@rec.SessionStatisticsPlain.PelletsDestroyedMedium</td>
                        </tr>
                        <tr>
                            <td>PelletsDestroyedSmall</td>
                            <td>@rec.SessionStatisticsPlain.PelletsDestroyedSmall</td>
                        </tr>
                        <tr>
                            <td>PowerUpBulletDamageCollected</td>
                            <td>@rec.SessionStatisticsPlain.PowerUpBulletDamageCollected</td>
                        </tr>
                        <tr>
                            <td>PowerUpBulletSpeedCollected</td>
                            <td>@rec.SessionStatisticsPlain.PowerUpBulletSpeedCollected</td>
                        </tr>
                        <tr>
                            <td>PowerUpPlayerSpeedCollected</td>
                            <td>@rec.SessionStatisticsPlain.PowerUpPlayerSpeedCollected</td>
                        </tr>
                    </table>
                    <iframe style="background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);" width="440" height="480" src=@chartUrl></iframe>
                </center>
                }
            }
        }
</div>


@code {

    private string _eventId = string.Empty;

    private Player Player { get; set; } = new();
    private List<SimilarRecording> Similar { get; set; } = new();
    private List<SimilarRecording> SimilarBySpeed { get; set; } = new();
    private List<SimilarRecording> SimilarByAccel { get; set; } = new();

    private string _name = string.Empty;
    private string _atlasChartIdSimilar = string.Empty;
    private string _chartUrl = string.Empty;
    private string _errorMessage = string.Empty;
    private readonly RestClient _restClient = RestServiceClient.Create();

    private string chartFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var queryParameters = UrlHelper.GetParameters(NavigationManager.Uri);

            _name = queryParameters[Constants.QueryParameterName];
            _eventId = queryParameters[Constants.QueryParameterEventId];
            var playerFilter = new Dictionary<string, string>
            {
                { "name", _name }
            };

            string playersUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointPlayers, playerFilter);
            var players = await _restClient.GetJsonAsync<List<Player>>(playersUrlWithQuery);
            Player = players.First();

            //string similarBySpeedUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointSimilarBySpeed, playerFilter);
            //SimilarBySpeed = await _restClient.GetJsonAsync<List<SimilarRecording>>(similarBySpeedUrlWithQuery);

            string similarUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointSimilar, playerFilter);
            Similar = await _restClient.GetJsonAsync<List<SimilarRecording>>(similarUrlWithQuery);

            //TO-DO: Revisit acceleration
            //string similarByAccelUrlWithQuery = UrlHelper.BuildUrlWithQuery(Constants.RestServiceEndpointSimilarByAccel, playerFilter);
            //SimilarByAccel = await _restClient.GetJsonAsync<List<SimilarRecording>>(similarByAccelUrlWithQuery);

            DotEnv.Load();
            var envVars = DotEnv.Read();
            _atlasChartIdSimilar = envVars["ATLAS_CHART_ID_SIMILAR"];
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
            _errorMessage = "PLAYER NOT FOUND";
        }
    }
}