name: Deployment (all)

on:
  push:
    branches:
      - PROD
      - STAGING

env:
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  PROD_IP: ${{ secrets.PROD_IP }}
  STAGING_IP: ${{ secrets.STAGING_IP }}
  CONNECTION_STRING_STAGING: ${{ secrets.CONNECTION_STRING_STAGING }}
  CONNECTION_STRING_PROD: ${{ secrets.CONNECTION_STRING_PROD }}

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:

      # Environment

      - name: Set Environment Variables For PROD And STAGING
        run: |
          if [ "${{ github.ref }}" == "refs/heads/STAGING" ]; then
            echo "ENVIRONMENT_IP=${STAGING_IP}" >> $GITHUB_ENV
            echo "DATABASE_NAME=Leafsteroids_stage" >> $GITHUB_ENV
            echo "CONNECTION_STRING=${CONNECTION_STRING_STAGING}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT_IP=${PROD_IP}" >> $GITHUB_ENV
            echo "DATABASE_NAME=Leafsteroids" >> $GITHUB_ENV
            echo "CONNECTION_STRING=${CONNECTION_STRING_PROD}" >> $GITHUB_ENV
          fi

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create SSH Key File
        run: |
          echo "${EC2_PRIVATE_KEY}" > ec2_private_key.pem
          chmod 400 ec2_private_key.pem

      - name: Install .NET SDK 7 On The AWS EC2 Instance
        run: |
          echo ${{ env.ENVIRONMENT_IP }}
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo apt-get update && sudo apt-get install -y dotnet-sdk-7.0'

      # REST service

      - name: Create The .env File Inside The `rest_service` Directory
        run: |
          echo "CONNECTION_STRING=${{ env.CONNECTION_STRING }}" > ./rest_service/.env
          echo "DATABASE_NAME=${{ env.DATABASE_NAME }}" >> ./rest_service/.env     

      - name: Copy The rest_service Directory To The AWS EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} "rm -rf /home/ubuntu/rest_service && mkdir /home/ubuntu/rest_service"
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem -r ./rest_service ubuntu@${{ env.ENVIRONMENT_IP }}:/home/ubuntu/

      - name: Copy The Systemd Service To The AWS EC2 Instance
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem deployment/rest_service.service ubuntu@${{ env.ENVIRONMENT_IP }}:/home/ubuntu/rest_service.service

      - name: Enable And Start The Systemd Service On The AWS EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo mv /home/ubuntu/rest_service.service /etc/systemd/system/rest_service.service'
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo systemctl enable rest_service.service'
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo systemctl daemon-reload'
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo systemctl start rest_service.service'
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo systemctl restart rest_service.service'

      # Website

      - name: Create The .env File Inside The `website` Directory
        run: |
          echo "REST_SERVICE_IP=${{ env.STAGING_IP }}" > ./website/.env
          echo "REST_SERVICE_PORT=8000" >> ./website/.env     

      - name: Copy The website Directory To The AWS EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} "rm -rf /home/ubuntu/website && mkdir /home/ubuntu/website"
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem -r ./website ubuntu@${{ env.ENVIRONMENT_IP }}:/home/ubuntu/

      - name: Copy The Systemd Service To The AWS EC2 Instance
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem deployment/website.service ubuntu@${{ env.ENVIRONMENT_IP }}:/home/ubuntu/website.service

      - name: Enable And Start The Systemd Service On The AWS EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo mv /home/ubuntu/website.service /etc/systemd/system/website.service'
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo systemctl enable website.service'
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo systemctl daemon-reload'          
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo systemctl start website.service'
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_private_key.pem ubuntu@${{ env.ENVIRONMENT_IP }} 'sudo systemctl restart website.service'
